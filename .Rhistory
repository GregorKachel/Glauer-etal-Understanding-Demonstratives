# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
# if (!require(lme4)) install.packages('lme4'); library(lme4)
# if (!require(beeswarm)) install.packages('beeswarm'); library(beeswarm) # for APA-style beeplots
if (!require(afex)) install.packages('afex'); library(afex) # aov functions
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, CohenD
# if (!require(kableExtra)) install.packages('kableExtra'); library(kableExtra) # for tables with images
if (!require(magick)) install.packages('magick'); library(magick) # for cropping plots
if (!require(ggsci)) install.packages('ggsci'); library(ggsci) # colour schemes for ggplot2
if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # required for rounding pvalues
# read data
raw.data <- read.csv("./data/schmischmu-cleandata.csv")
# raw.data$agegroup <- ifelse(raw.data$agegroup == "adult", "adult", "child")  # too few 5 and 6yo for individual groups
# prepare data - mutate to correct data type
test.data <- raw.data %>%
dplyr::filter(agecat != "teen") %>%
# rename sex
mutate(sex =   case_when(
sex == "female" ~ "female",
sex == "diverse" ~ "unknown",
TRUE ~ "male")) %>%
# rename method
mutate(method =   case_when(
method == "adultonline" ~ "online_website",
method == "blossin" ~ "in_person",
method == "zoom" ~ "online_call",
TRUE ~ "online_website")) %>%
# turn variables into factors for analyses
mutate(sex = as.factor(sex),
method = as.factor(method),
condition = as.factor(condition),
id = as.factor(id),
agecat = as.factor(agecat))%>%
# relevel factors for analyses
mutate(condition = relevel(condition, ref = "complex labeling"),
agecat = relevel(agecat, ref = "adult"),
sex = relevel(sex, ref = "female")
) %>%
# scale trial
mutate(z.trial = as.vector(scale(trial)))
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
# if (!require(lme4)) install.packages('lme4'); library(lme4)
# if (!require(beeswarm)) install.packages('beeswarm'); library(beeswarm) # for APA-style beeplots
if (!require(afex)) install.packages('afex'); library(afex) # aov functions
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, CohenD
# if (!require(kableExtra)) install.packages('kableExtra'); library(kableExtra) # for tables with images
if (!require(magick)) install.packages('magick'); library(magick) # for cropping plots
if (!require(ggsci)) install.packages('ggsci'); library(ggsci) # colour schemes for ggplot2
if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # required for rounding pvalues
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# read data
raw.data <- read.csv("./data/schmischmu-cleandata.csv")
# raw.data$agegroup <- ifelse(raw.data$agegroup == "adult", "adult", "child")  # too few 5 and 6yo for individual groups
# prepare data - mutate to correct data type
test.data <- raw.data %>%
dplyr::filter(agecat != "teen") %>%
# rename sex
mutate(sex =   case_when(
sex == "female" ~ "female",
sex == "diverse" ~ "unknown",
TRUE ~ "male")) %>%
# rename method
mutate(method =   case_when(
method == "adultonline" ~ "online_website",
method == "blossin" ~ "in_person",
method == "zoom" ~ "online_call",
TRUE ~ "online_website")) %>%
# turn variables into factors for analyses
mutate(sex = as.factor(sex),
method = as.factor(method),
condition = as.factor(condition),
id = as.factor(id),
agecat = as.factor(agecat))%>%
# relevel factors for analyses
mutate(condition = relevel(condition, ref = "complex labeling"),
agecat = relevel(agecat, ref = "adult"),
sex = relevel(sex, ref = "female")
) %>%
# scale trial
mutate(z.trial = as.vector(scale(trial)))
demographics_agecat_total <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat!="teen") %>% # exclude children that do not match age range
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
group_by(agecat) %>%
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
# demographics_agecat_total$N[1] # adults
# demographics_agecat_total$N[2] # children
demographics_excluded <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat=="teen") %>% # exclude children that do not match age range
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
# demographics_excluded$N
# demographics_excluded$female
demographics_agecat_bycondition <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat!="teen") %>% # exclude children that do not match age range
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
group_by(agecat, condition) %>%
dplyr::summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
# descriptives[, -1] <- printnum(descriptives[, -1]
# unique(raw.data$method)
demographics_method <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat!="teen") %>% # exclude children that do not match age range
dplyr::summarize(
N = length(id),
zoom = length(which(method=="zoom")),
blossin = length(which(method=="blossin")),
online = length(which(method=="online")),
adultonline = length(which(method=="adultonline"))
)
apa_table(
demographics_agecat_bycondition,
caption = "Demographics - age categories by condition",
note = "",
escape = FALSE,
placement = "h"
)
# str(raw.data)
# aggregate proportion of correct choices and number of trials for each individual
overview.ind.test.data  <- raw.data %>%
group_by(agecat, condition, id) %>%
arrange(agecat, condition) %>%
dplyr::summarise("correct" = mean(correct_all),
"trials" = max(trial))
# library(scales)
# if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # alternative to scales
# required for rounding pvalues, is part of tidyverse but needs to be loaded again; this occurs when functions are overwritten multiple times
# if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, CohenD
overviewtestable <- overview.ind.test.data %>%
filter(agecat!="teen") %>% # exclude children that do not match age range
group_by(agecat, condition) %>%
dplyr::summarise(N = n_distinct(id),
"trials/N" = round(sum(trials)/n_distinct(id), 2),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2)
# p = p_mark_significant(p_round(t.test((correct), mu = 0.25)$p.value, digits =3), cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", "")),
# df= t.test((correct), mu = 0.5)$parameter,
# "t(23)" = round(t.test((correct), mu = 0.25)$statistic, 2),
# d = round(cohensD((correct), mu = 0.25), 2)
)
#p = pvalue(t.test((correct), mu = 0.25)$p.value, accuracy = .001),
# ### Maybe LATER add binomial for every individual
# ### run binomial on individual performance
# overview.ind.binom.data <- raw.data %>%
#      filter(agecat != "teen") %>% # exclude children that do not match age range
#      select(condition, agecat, id, correct_all) %>%
#      group_by(condition, agecat, id) %>%
#      summarise("% correct" = round(mean(correct_all)*100, 2),
#                "sum correct" = sum(correct_all),
#                "sum trials" = length(correct_all),
#                "p" = round(binom.test(sum(correct_all), length(correct_all),
#                                 p = 0.5, alternative = "greater")$p.value, 3),
#                "sig" = if_else(p < 0.05, 1, 0)
#                )
#
# # count successful individuals and create proportions
# overview.sum.binom.data <- overview.ind.binom.data %>%
#    group_by(condition, agecat) %>%
#    summarise(N = n_distinct(id),
#            successful  = as.integer(sum(sig))) %>%
#    mutate("% successful" = round((successful/N)*100), 2)
#
# # add binomial results to the
# overviewtestable <- cbind(overviewtestable, "N suc" = overview.sum.binom.data$successful, "% suc" = overview.sum.binom.data$"% successful")
apa_table(
overviewtestable,
caption = "Overview of Performance in Test Trials",
note = "Table provides the number of participants (N) for all experimental groups, as well as the percentage (M) and standard deviation (SD) of correct choices. Data for each child was averaged across trials.",
escape = TRUE, # if TRUE special Latex characters are escaped
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "footnotesize" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# agecats, correct trials
plot.data <- raw.data %>%
filter(agecat != "teen") %>% # exclude children that do not match age range
select(id, agecat, condition, correct_all) %>%
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
group_by(agecat, condition, id) %>%
dplyr::summarise(proportion.correct = round(mean(correct_all)*100, 2))
firstplot <- ggplot(plot.data, aes(x = condition, y = proportion.correct, colour = condition, fill = condition)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0.1) +
geom_hline(yintercept=50, linetype="dashed", color = "black") +
geom_jitter(height = 0.1, width = 0.2, size = 2, alpha = 1,) +
stat_summary(fun=mean, geom="point", shape=20, size=8) +
coord_cartesian(ylim = c(0, 100)) +
scale_color_npg() +
scale_fill_npg() +
theme_gray() +
theme(legend.position = "bottom") +
scale_y_continuous(name = "Proportion Correct") +
labs(x = "Condition",
y = "Proportion Correct",
title = "Proportion of participants' correct trials by condition and age group",
#caption = "Distribution of participants' proportion of correct trials per condition and age category"
) +
facet_wrap(~ agecat, ncol = 1)
firstplot
ggsave("proportioncorrect.tiff", path = "./images", width = 9, height = 8, device='tiff', dpi=300)
# aggregate data
agg.data <- test.data %>%
group_by(id, agecat, condition) %>%
dplyr::summarise(correct = mean(correct_all))
# run ANOVA
aov.model <- aov(correct ~ condition*agecat, data = agg.data)
# # Get results for writing
# if (!require(report)) install.packages('report'); library(report)
# summary(aov.model)
# report(aov.model)
# aov.model
test.data.H1.labeling <- agg.data %>%
filter(condition=='complex labeling') %>%
group_by(agecat)
ttest_H1_labeling <- t.test(correct ~ agecat, data=test.data.H1.labeling, alternative = 'greater')
effectsize_H1_labeling <-  round(cohensD(correct ~ agecat, data=test.data.H1.labeling), 2)
test.data.H1.pseudodem <- agg.data %>%
filter(condition=='pseudo-word demonstrative') %>%
group_by(agecat)
ttest_H1_pseudodem <- t.test(correct ~ agecat, data=test.data.H1.pseudodem, alternative = 'greater')
effectsize_H1_pseudodem <-  round(cohensD(correct ~ agecat, data=test.data.H1.pseudodem), 2)
test.data.H1.demonstrative <- agg.data %>%
filter(condition=='demonstrative') %>%
group_by(agecat)
ttest_H1_demonstrative <- t.test(correct ~ agecat, data=test.data.H1.demonstrative, alternative = 'greater')
effectsize_H1_demonstrative <-  round(cohensD(correct ~ agecat, data=test.data.H1.demonstrative), 2)
# ttest_H1_naming <- t.test(
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="complex labeling",], correct_all ~ date, mean)$correct_all,
#   aggregate(data=raw.data[raw.data$agecat=="adult" & raw.data$condition=="complex labeling",], correct_all ~ date, mean)$correct_all)
#
# ttest_H1_indexical <- t.test(
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="pseudo-word demonstrative",], correct_all ~ date, mean)$correct_all,
#   aggregate(data=raw.data[raw.data$agecat=="adult" & raw.data$condition=="pseudo-word demonstrative",], correct_all ~ date, mean)$correct_all)
#
# ttest_H1_demonstrative <- t.test(
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="demonstrative",], correct_all ~ date, mean)$correct_all,
#   aggregate(data=raw.data[raw.data$agecat=="adult" & raw.data$condition=="demonstrative",], correct_all ~ date, mean)$correct_all)
ttest_H2 <- t.test(
aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="demonstrative",], correct_all ~ date, mean)$correct_all,
aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="pseudo-word demonstrative",], correct_all ~ date, mean)$correct_all)
# no sign. difference between pseudo-word demonstrative and demonstrative condition
test.data.H3.pseudodem <- agg.data %>%
filter((condition=='pseudo-word demonstrative' | condition=='complex labeling') & agecat=='child') %>%
group_by(condition)
test.data.H3.pseudodem$condition <- droplevels(test.data.H3.pseudodem$condition)
ttest_H3_pseudodem <- t.test(correct ~ condition, data=test.data.H3.pseudodem, alternative = 'greater')
effectsize_H3_pseudodem <- round(cohensD(correct ~ condition, data=test.data.H3.pseudodem), 2)
test.data.H3.demonstrative <- agg.data %>%
filter((condition=='demonstrative' | condition=='complex labeling') & agecat=='child') %>%
group_by(condition)
test.data.H3.demonstrative$condition <- droplevels(test.data.H3.demonstrative$condition)
ttest_H3_demonstrative <-t.test(correct ~ condition, data=test.data.H3.demonstrative, alternative = 'greater')
effectsize_H3_demonstrative <- round(cohensD(correct ~ condition, data=test.data.H3.demonstrative), 2)
# aov_H3 <- (afex::aov_ez(id = "date", dv = "correct_all", data = raw.data[raw.data$agecat=="child",], between = "condition", fun_aggregate = mean))
#
# ttest_H3_namingVSindex <- t.test(
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="complex labeling",], correct_all ~ date, mean)$correct_all,
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="pseudo-word demonstrative",], correct_all ~ date, mean)$correct_all)
# # good: p-value survives any correction for multiple testing
#
# ttest_H3_namingVSdemon <- t.test(
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="complex labeling",], correct_all ~ date, mean)$correct_all,
#   aggregate(data=raw.data[raw.data$agecat=="child" & raw.data$condition=="demonstrative",], correct_all ~ date, mean)$correct_all)
# # also here. good: p-value survives any correction for multiple testing
# str(raw.data)
# library(scales)
# required for rounding pvalues, is part of tidyverse but needs to be loaded again; this occurs when functions are overwritten multiple times
# if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # alternative to scales
# aggregate proportion of correct choices and number of trials for each individual
randomchoice.ind.test.data  <- raw.data %>%
group_by(agecat, condition, id) %>%
arrange(agecat, condition) %>%
dplyr::summarise("correct_first" = mean(correct_first),
"correct_second" = mean(correct_second),
"correct_all" = mean(correct_all),
"trials" = max(trial))
randomchoice.responses  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="response", values_to = "correct") %>%
filter(agecat=="child" & response!="correct_trial") %>%
group_by(condition, response) %>%
arrange(condition, response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2),
"p" = p_mark_significant(p_format(t.test((correct), mu = 0.5)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", ""))) %>%
ungroup()
randomchoice.trials  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="response", values_to = "correct") %>%
filter(agecat=="child" & response=="correct_trial") %>%
group_by(condition, response) %>%
arrange(condition, response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2),
"p" = p_mark_significant(p_format(t.test((correct), mu = 0.25)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", "")))%>%
ungroup()
df_list <- list(randomchoice.responses, randomchoice.trials)
randomchoice <- df_list %>%
reduce(full_join) %>%
arrange(condition)
apa_table(randomchoice,
landscape = FALSE,
caption = "Average probability of children's correct answers for first requests, second requests, and trials",
note = "Table provides the number of participants (N) for all experimental groups, as well as the percentage (M) and standard deviation (SD) of correct choices. One-tailed one-sample *t*-tests tested group-level performance against a chance-level of 50% for individual requets and of 25% for trials.",
escape = TRUE, # if TRUE special Latex characters are escaped
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "footnotesize" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# calculation of proximity bias and mutual exclusivity bias indexes; values indicate strength of bias: negative values indicate bias towards choosing the distal object/selecting the same object, zero = no bias, positive values indicate bias towards proximal/other object
indiv.resp.index  <- raw.data %>%
mutate(proximal_first = case_when(
sideCile1==picked_ball1 ~ 1,
TRUE ~ 0),
proximal_second = case_when(
sideCile2==picked_ball2 ~ 1,
TRUE ~ 0),
proximal = proximal_first + proximal_second,
switch_ball = case_when(
picked_ball1!=picked_ball2 ~ 1,
TRUE ~ 0))%>%
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
filter(agecat=="Child")%>%
group_by(condition, id) %>%
dplyr::summarise("Proportion Correct" = sum(correct_all)/8,
"Proximity Bias" = (sum(proximal)-8)/8,
"Mutual Exclusivity Bias" = (sum(switch_ball)-4)/4)
indiv.resp.index.means  <- raw.data %>%
mutate(proximal_first = case_when(
sideCile1==picked_ball1 ~ 1,
TRUE ~ 0),
proximal_second = case_when(
sideCile2==picked_ball2 ~ 1,
TRUE ~ 0),
proximal = proximal_first + proximal_second,
switch_ball = case_when(
picked_ball1!=picked_ball2 ~ 1,
TRUE ~ 0))%>%
filter(agecat=="child")%>%
group_by(condition, id) %>%
dplyr::summarise("Proportion Correct" = sum(correct_all)/8,
"Proximity Bias" = (sum(proximal)-8)/8,
"Mutual Exclusivity Bias" = (sum(switch_ball)-4)/4) %>%
ungroup() %>%
group_by(condition) %>%
dplyr::summarise("M_prox" = round(mean(`Proximity Bias`), 2),
"Mdn_prox" = round(median(`Proximity Bias`), 2),
"SD_prox" = round(sd(`Proximity Bias`), 2),
"t_prox" = round(t.test((`Proximity Bias`), mu = 0)$statistic, 3),
"df_prox" = t.test((`Proximity Bias`), mu = 0)$parameter,
"p_prox" = p_mark_significant(p_format(t.test((`Proximity Bias`), mu = 0)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", "")),
"M_mutex" = round(mean(`Mutual Exclusivity Bias`), 2),
"Mdn_mutex" = round(median(`Mutual Exclusivity Bias`), 2),
"SD_mutex" = round(sd(`Mutual Exclusivity Bias`), 2),
"t_mutex" = round(t.test((`Mutual Exclusivity Bias`), mu = 0)$statistic, 3),
"df_mutex" = t.test((`Mutual Exclusivity Bias`), mu = 0)$parameter,
"p_mutex" = p_mark_significant(p_format(t.test((`Mutual Exclusivity Bias`), mu = 0)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", ""))#,
# "method_mutex" = t.test((`Mutual Exclusivity Bias`), mu = 0)$method
) %>%
ungroup()
# plot proximity bias index per condition
proxibiasplot <- ggplot(indiv.resp.index, aes(x = condition, y = `Proximity Bias`, colour = condition, fill = condition)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0.1) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_jitter(height = 0, width = 0.2, size = 2, alpha = .6,) +
stat_summary(fun=mean, geom="point", shape=20, size=8) +
coord_cartesian(ylim = c(-1, 1)) +
scale_color_npg() +
scale_fill_npg() +
theme_gray() +
theme(legend.position = "bottom") +
scale_y_continuous(name = "Proximity Bias")+
labs(x = "Condition", title = "Proximity Bias by Condition")
#plot mutual exclusivity bias per condition
disjubiasplot <- ggplot(indiv.resp.index, aes(x = condition, y = `Mutual Exclusivity Bias`, colour = condition, fill = condition)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0.1) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_jitter(height = 0, width = 0.2, size = 2, alpha = .6,) +
stat_summary(fun=mean, geom="point", shape=20, size=8) +
coord_cartesian(ylim = c(-1, 1)) +
scale_color_npg() +
scale_fill_npg() +
theme_gray() +
theme(legend.position = "bottom") +
scale_y_continuous(name = "Mutual Exclusivity Bias")+
labs(x = "Condition", title = "Mutual Exclusivity Bias by Condition")
# geom_jitter(height = 0.1, width = 0.2, size = indiv.resp.index$`proportion correct`*8, alpha = .6,) +
proxibiasplot
ggsave("proxibiasplot.tiff", path = "./images", width = 9, height = 4, device='tiff', dpi=300)
disjubiasplot
ggsave("disjubiasplot.tiff", path = "./images", width = 9, height = 4, device='tiff', dpi=300)
r_refs(file = "r-references.bib")
